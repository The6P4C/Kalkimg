using Ionic.Zlib;
using System;
using System.Diagnostics;
using System.Drawing;
using System.IO;
using System.Reflection;

namespace Kalkimg {
	class C2PFile {
		private byte[] fileData;

		public C2PFile(Bitmap imageToConvert) {
			byte[] imageData = BitmapToRGB565Data(imageToConvert);

			byte[] compressedImageData = Compress(imageData);

			byte[] header = GetHeader(compressedImageData.Length, imageToConvert.Width, imageToConvert.Height);
			byte[] footer = GetFooter();

			fileData = new byte[header.Length + compressedImageData.Length + footer.Length];

			Array.Copy(header, 0, fileData, 0, header.Length);
			Array.Copy(compressedImageData, 0, fileData, header.Length, compressedImageData.Length);
			Array.Copy(footer, 0, fileData, header.Length + compressedImageData.Length, footer.Length);
		}

		private static byte ConvertRange(byte originalStart, byte originalEnd, byte newStart, byte newEnd, byte value) {
			double scale = (double) (newEnd - newStart) / (originalEnd - originalStart);
			return (byte) (newStart + ((value - originalStart) * scale));
		}

		private static byte[] BitmapToRGB565Data(Bitmap image) {
			byte[] imageData = new byte[image.Width * image.Height * 2];

			int imageDataIndex = 0;

			for (int y = 0; y < image.Height; ++y) {
				for (int x = 0; x < image.Width; ++x) {
					Color c = image.GetPixel(x, y);

					byte r = ConvertRange(0, 255, 0, 0x1F, c.R);
					byte g = ConvertRange(0, 255, 0, 0x3F, c.G);
					byte b = ConvertRange(0, 255, 0, 0x1F, c.B);

					int rgb565 = (r << 11) + (g << 5) + b;
					byte rgb565_2 = (byte) (rgb565 >> 8 & 0xFF);
					byte rgb565_1 = (byte) (rgb565 & 0xFF);

					imageData[imageDataIndex] = rgb565_2;
					imageData[imageDataIndex + 1] = rgb565_1;

					imageDataIndex += 2;
				}
			}

			return imageData;
		}

		private static byte[] Compress(byte[] input) {
			using (MemoryStream ms = new MemoryStream()) {
				using (ZlibStream zls = new ZlibStream(ms, CompressionMode.Compress, CompressionLevel.BestSpeed)) {
					zls.Write(input, 0, input.Length);
				}
				return ms.ToArray();
			}
		}

		public byte[] FileData {
			get {
				return fileData;
			}
		}

		private byte[] GetHeader(int imageDataSize, int width, int height) {
			int fileSize = imageDataSize + 0xDC + 0x17C; // imageDataSize + header size + footer size

			int a = ~(fileSize & 0xFFFFFF) & 0xFFFFFF;
			byte a3 = (byte) (a >> 16 & 0xFF);
			byte a2 = (byte) (a >> 8 & 0xFF);
			byte a1 = (byte) (a & 0xFF);

			byte b1 = (byte) ((0x1D1 - (fileSize & 0xFF)) & 0xFF);

			int c = fileSize - 0x20;
			byte c4 = (byte) (c >> 24 & 0xFF);
			byte c3 = (byte) (c >> 16 & 0xFF);
			byte c2 = (byte) (c >> 8 & 0xFF);
			byte c1 = (byte) (c & 0xFF);

			int d = fileSize - 0x234;
			byte d4 = (byte) (d >> 24 & 0xFF);
			byte d3 = (byte) (d >> 16 & 0xFF);
			byte d2 = (byte) (d >> 8 & 0xFF);
			byte d1 = (byte) (d & 0xFF);

			int e = fileSize - 0x254;
			byte e4 = (byte) (e >> 24 & 0xFF);
			byte e3 = (byte) (e >> 16 & 0xFF);
			byte e2 = (byte) (e >> 8 & 0xFF);
			byte e1 = (byte) (e & 0xFF);

			Debug.Assert(width > 0 && width <= 0x136);
			Debug.Assert(height > 0 && height <= 0x191);

			int w = width & 0xFFFF;
			int h = height & 0xFFFF;
			byte w2 = (byte) (w >> 8 & 0xFF);
			byte w1 = (byte) (w & 0xFF);
			byte h2 = (byte) (h >> 8 & 0xFF);
			byte h1 = (byte) (h & 0xFF);

			int f = fileSize - 0x258;
			byte f4 = (byte) (f >> 24 & 0xFF);
			byte f3 = (byte) (f >> 16 & 0xFF);
			byte f2 = (byte) (f >> 8 & 0xFF);
			byte f1 = (byte) (f & 0xFF);

			return new byte[] {
				0xBC, 0xBE, 0xAC, 0xB6, 0xB0, 0xFF, 0xFF, 0xFF,
				0x9C, 0xCD, 0x8F, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				0xFF, 0xFE, 0xFF, 0xEF, 0xFF, 0xFE, 0xFF, a3,
				a2,   a1,   b1,   0x00, 0x00, 0x00, 0x00, 0x00,
				0x43, 0x43, 0x30, 0x31, 0x30, 0x30, 0x43, 0x6F,
				0x6C, 0x6F, 0x72, 0x43, 0x50, 0x00, 0x00, 0x00,
				c4,   c3,   c2,   c1,   0x00, 0x00, 0x00, 0x09,
				d4,   d3,   d2,   d1,   0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x7C,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x30, 0x31, 0x30, 0x30, e4,   e3,   e2,   e1,
				0x00, 0x00, w2,   w1,   h2,   h1,   0x00, 0x10,
				0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF, 0x00, 0xFF,
				0x00, 0x01, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
				f4,   f3,   f2,   f1
			};
		}
		
		private byte[] GetFooter() {
			return new byte[] {
				0x30, 0x31, 0x30, 0x30, 0x00, 0x00, 0x00, 0x8C,
				0x07, 0x70, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x60, 0x00, 0x07, 0x70, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
				0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x98,
				0x04, 0x60, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x60, 0x00, 0x04, 0x60, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
				0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x10, 0x00, 0x05, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x09, 0x98,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x06, 0x28, 0x31, 0x85,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
				0x06, 0x28, 0x32, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x09, 0x98, 0x00, 0x00, 0xFF, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF, 0x30, 0x31, 0x30, 0x30,
				0xE0, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
				0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
				0x02, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x10, 0x01, 0x03, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
				0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
				0x02, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x10, 0x01, 0x03, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
				0x03, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x10, 0x00, 0x01, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00,
				0x02, 0x50, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x10, 0x01, 0x02, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x01,
				0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x10, 0x01, 0x03, 0x14, 0x15, 0x93,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
				0x03, 0x14, 0x15, 0x93, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x10, 0x00, 0x03, 0x14, 0x15, 0x93,
				0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60, 0x00,
				0x03, 0x14, 0x15, 0x93, 0x00, 0x00, 0x00, 0x00,
				0x00, 0x00, 0x10, 0x00, 0x01, 0x01, 0x01, 0xFF,
				0xFF, 0xFF, 0xFF, 0xFF
			};
		}
	}
}
